import Head from 'next/head'
import { Formik, Form, Field } from "formik"
import * as yup from 'yup'
import axios from "axios";
import styles from '../styles/Home.module.css'
import Header from '../compoents/header'

// Initial form values
const initialValues = { fromName: '', toName: '', toEmail: '', subject: '', body: '' }

export default function Home() {

  // Initializing YUP validation schema
  let emailSchema = yup.object().shape({
    fromName: yup.string().required('Required').nullable(false),
    toName: yup.string().required('Required').nullable(false),
    toEmail: yup.string().email('Invalid email').required('Required').nullable(false),
    subject: yup.string().required('Required').nullable(false),
    body: yup.string().required('Required').nullable(false),
  });

  // Calling post API to send email on form submission
  const handleSubmit = async (values, { resetForm }) => {
    const email = { from_name: values.fromName, to_email: values.toEmail, to_name: values.toName, subject: values.subject, body: values.body }
    await axios.post("http://localhost:8000/api/email", email).then(res => {
      alert("Email Sent")
      resetForm({})
    }).catch(error => {
      console.log(error)
    })
  }

  return (
    <>
      <Head>
        <title>Email Provider</title>
        <meta name="A simple email sending client" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Formik
        // Initializing form initial values
        initialValues={initialValues}
        // validating our YUP schema for inputs
        validationSchema={emailSchema}
        onSubmit={handleSubmit}
      >
        {({ errors, touched }) => (
          <Form className={styles.formContainer}>
             <div className={styles.inputContainer}>
              <Field className={styles.input} name="fromName" placeholder="From Name" />
              {errors.fromName && touched.fromName ? (
                <div className={styles.errorMessage}>{errors.fromName}</div>
              ) : null}
            </div>
            <div className={styles.inputContainer}>
              <Field className={styles.input} name="toName" placeholder="To Name" />
              {errors.toName && touched.toName ? (
                <div className={styles.errorMessage}>{errors.toName}</div>
              ) : null}
            </div>
            <div className={styles.inputContainer}>
              <Field className={styles.input} name="toEmail" type="email" placeholder="To Email" />
              {errors.toEmail && touched.toEmail ? (
                <div className={styles.errorMessage}>{errors.toEmail}</div>
              ) : null}
            </div>
            <div className={styles.inputContainer}>
              <Field className={styles.input} name="subject" placeholder="Subject" />
              {errors.subject && touched.subject ? <div className={styles.errorMessage}>{errors.subject}</div> : null}
            </div>
            <div className={styles.inputContainer}>
              <Field className={styles.input} name="body" component="textarea" placeholder="Body" />
              {errors.body && touched.body ? <div className={styles.errorMessage}>{errors.body}</div> : null}
            </div>
            <button type="submit">Send</button>
          </Form>
        )}
      </Formik>
    </>
  )
}